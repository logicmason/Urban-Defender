import mochi.as2.*;import ui.Drawing;class ui.MenuItem{    public static var CHANGED:String = "onChanged";    private var _dispatcher:MochiEventDispatcher;        private static var MARGINS:Number = 4;    private static var SPACING:Number = 4;    private static var ROUNDING:Number = 8;    private static var ICON_HEIGHT:Number = 24;        private var _callback:Function;    private var _text:String;    private var _image:String;    private var _clip:MovieClip;    private var _icon:MovieClip;    private var _textfield:TextField;    private var _highlight:MovieClip;    private var _width:Number;        public function MenuItem( callback:Function, text:String, image:String )    {		_dispatcher = new MochiEventDispatcher();        _callback = callback;        _text = text;        _image = image;    }    public function addEventListener( name:String, self, that ):Void    {        _dispatcher.addEventListener( name, self, that );    }    public function removeEventListener( name:String, self, that ):Void    {        _dispatcher.removeEventListener( name, self, that );    }        public function set x(v:Number):Void    {        _clip._x = v;    }    public function set y(v:Number):Void    {        _clip._y = v;    }    public function set width(w:Number):Void    {        if( w == _width )            return ;                _width = w;        redraw();    }        public function create( clip:MovieClip ):Void    {        var depth:Number = clip.getNextHighestDepth();        _clip = clip.createEmptyMovieClip( '_menu' + depth, depth );        _highlight = _clip.createEmptyMovieClip( '_highlight', _clip.getNextHighestDepth() );        _highlight._visible = false;                if( _image )        {            _icon = _clip.createEmptyMovieClip( '_icon', _clip.getNextHighestDepth() );            var mcl:MovieClipLoader = new MovieClipLoader();            mcl.addListener( this );            mcl.loadClip( _image, _icon );        }        else        {            _icon = null;        }                        _clip.createTextField( '_text', _clip.getNextHighestDepth(), 0, 0, 1, 1 );        _textfield = _clip._text;        _textfield.setNewTextFormat( new TextFormat( "_sans", 12, 0xFFFFFF ) );        _textfield.text = _text;        _textfield.autoSize = 'left';        _textfield.selectable = false;            var self:MenuItem = this;        _clip.onRelease = function():Void{ self._callback(); };        _clip.onRollOver = function():Void{ self.showHighlight(); };        _clip.onRollOut = function():Void{ self.hideHighlight(); };        _clip.hitArea = _highlight;        hideHighlight();    }    private function showHighlight():Void    {        _highlight._visible = true;    }    private function hideHighlight():Void    {        _highlight._visible = false;    }    public function get contentWidth():Number    {        var n:Number = _textfield._width + MARGINS * 2;                if( _image )            return n + SPACING + _icon._width;                return n;    }    public function get contentHeight():Number    {        if( _icon )            return Math.max(_icon._height, _textfield._height) + MARGINS * 2;        else            return _textfield._height + MARGINS * 2;    }    private function onLoadInit():Void    {        _icon._xscale = _icon._yscale = ICON_HEIGHT * 100 / _icon._width;        redraw();        _dispatcher.triggerEvent( CHANGED );    }    private function redraw():Void    {        if( _icon )        {            _icon._x = MARGINS;            _textfield._x = _icon._x + SPACING + _icon._width;            _icon._y = _textfield._y = MARGINS;        }        else        {            _textfield._x = MARGINS;            _textfield._y = MARGINS;        }                    _highlight.clear();        _highlight.beginFill( 0xFFFFFFF, 25 );        Drawing.drawRoundedBox( _highlight, 0, 0, _width, contentHeight, ROUNDING );        _highlight.endFill();    }}